datasource db {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

enum PostType {
  controller
  motorController
  motor
  coprocessor
  wheel
  gearsAndGearboxes
  beltsAndChains
  bearingsAndHexShafts
  bumperMaterial
  sensor
  other
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String            @id @default(cuid())
  username         String?           @unique
  name             String?
  email            String?           @unique
  image            String?
  teamNumber       Int?
  admin            Boolean           @default(false)
  accounts         Account[]
  sessions         Session[]
  posts            Post[]
  favouritedTeams  FavouritedTeam[]
  favouritedEvents FavouritedEvent[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id               Int      @id @default(autoincrement())
  title            String
  content          String?
  price            Int
  type             PostType
  currencyType     String?
  formattedAddress String?
  latitude         Float?
  longitude        Float?
  media            String[]
  published        Boolean  @default(false)
  author           User     @relation(fields: [authorId], references: [id])
  authorId         String
}

model FavouritedTeam {
  id          Int     @id @default(autoincrement())
  team_number Int
  website     String?
  nickname    String
  city        String?
  state_prov  String?
  country     String?
  rookie_year Int
  User        User?   @relation(fields: [userId], references: [id])
  userId      String?
}

model FavouritedEvent {
  id               Int     @id @default(autoincrement())
  name             String
  address          String
  state_prov       String
  city             String
  country          String
  first_event_code String
  start_date       String
  end_date         String
  User             User?   @relation(fields: [userId], references: [id])
  userId           String?
}
